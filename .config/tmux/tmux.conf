## Flow control / rate limiting
#set-window-option -g c0-change-trigger 10
#set-window-option -g c0-change-interval 250

# Fastest command sequences (http://superuser.com/a/252717/65504)
set-option -s escape-time 0

# XTerm compatibility
set-option -g xterm-keys on

# Vi keys in copy mode
set-option -g mode-keys vi

# History boost
set-option -g history-limit 50000

# Emacs key bindings in command prompt (prefix + :) are better than vi keys, even for vim users
set-option -g status-keys emacs

# Focus events enabled for terminals that support them
set-option -g focus-events on

# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# Messages are displayed for 3 seconds
set-option -g display-time 3000

# history
set-option -g history-limit 100000

# Reload the file with Prefix r
bind R source-file ~/.tmux.conf \; display "Sourced tmux.conf"

# Next and prev window
#bind -r '-' previous-window
#bind -r '=' next-window
bind p previous-window
bind n next-window

# <prefix> r to rename window
bind r command-prompt 'rename-window %%'

# <prefix> p to paste buffer
unbind P
bind P paste-buffer

# <prefix> P to choose which buffer to paste
bind C-p choose-buffer

# remap prefix
unbind C-t
set-option -g prefix C-t
bind C-t send-prefix

# enable second prefix on remote connections; allows for nested sessions.
is_ssh='test -n "${SSH_CONNECTION}"'
if-shell "$is_ssh" "unbind C-b"
if-shell "$is_ssh" "set-option -g prefix2 C-b"
if-shell "$is_ssh" "bind C-b send-prefix"

# send commands to nested session with ^s s
bind s send-prefix

# escape-time is 0
set-option escape-time 0

# split windows like vim
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
bind < resize-pane -L 5
bind > resize-pane -R 5
bind - resize-pane -D 5
bind + resize-pane -U 5

# move panes between windows
#bind ! move-pane -t :1
#bind C-2 move-pane -t :2
#bind C-3 move-pane -t :3
#bind C-4 move-pane -t :4
#bind C-5 move-pane -t :5
#bind C-6 move-pane -t :6
#bind C-7 move-pane -t :7
#bind C-8 move-pane -t :8
#bind C-9 move-pane -t :9
#bind C-0 move-pane -t :0

## vi-style controls for copy mode
setw -g mode-keys vi

#unbind [
#bind Escape copy-mode
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy V rectangle-toggle
#bind-key -t vi-copy y copy-pipe "xclip -i -sel clipboard >/dev/null"


# check file exists before sourcing it in tmux.conf
if-shell "test -e ~/.tmux/theme.conf" "source ~/.tmux/theme.conf"
if-shell "test -e ~/.tmux/os.conf" "source ~/.tmux/os.conf"

# Lock after 15 minutes
#set-option -g lock-after-time 1800

# Keep windows around after they exit
#set-option -g remain-on-exit on

# Turn on xterm-keys so that additional function keys get escape sequences
set-window-option -g xterm-keys on

# Renumber windows when one is closed
set-option -g renumber-windows on

# increase the display time so messages can actually be read
set-option -g display-time 10000

# do NOT create a login shell by default
set-option -g default-command "exec ${SHELL}"

# kill window
bind Q confirm kill-pane

# Toggle mouse
bind m \
  set-option mouse\;\
  display 'mouse #{?mouse,on,off}'

## Enable mouse
set-option -g mouse on

# Turn the mouse on, but without copy mode dragging
#set-option -g mouse
#unbind -n MouseDrag1Pane
#unbind -tvi-copy MouseDrag1Pane
#unbind -temacs-copy MouseDrag1Pane

## Some extra key bindings to select higher numbered windows
bind F1 selectw -t:10
bind F2 selectw -t:11
bind F3 selectw -t:12
bind F4 selectw -t:13
bind F5 selectw -t:14
bind F6 selectw -t:15
bind F7 selectw -t:16
bind F8 selectw -t:17
bind F9 selectw -t:18
bind F10 selectw -t:19
bind F11 selectw -t:20
bind F12 selectw -t:21

# Keys to toggle monitoring activity in a window, and synchronize-panes
bind w set-option monitor-activity\; display 'monitor-activity #{?monitor-activity,on,off}'
bind S set-option synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'

# Keys to hide and show a window name from the status line
bind 'C-_' set-option window-status-format '#I'\; set-option window-status-current-format '#I'
bind 'C-+' set-option window-status-format '#I:#W#F'\; set-option window-status-current-format '#I:#W#F'

## Create a single default session
#neww -d -s0 -nsh 'exec zsh'
##new -d -s0 -nirssi 'exec irssi'
##set-option -t0:0 monitor-activity on
##set-option  -t0:0 aggressive-resize on
#neww -d -ntodo 'exec vim -c :TW'
#setw -t0:1 aggressive-resize on
##neww -d -nmutt 'exec mutt'
##setw -t0:2 aggressive-resize on
#neww -d
#neww -d
#neww -d

# vi
setw -g mode-keys vi
setw -g status-keys vi
# emacs
#setw -g mode-keys emacs
#setw -g status-keys emacs

# term
#set-option -g default-terminal "screen-256color"
# set-option -g default-terminal "xterm-256color"
# set-option -g default-terminal "tmux-256color"
#set-option -g default-terminal "screen-256color"

# Truecolor support
set-option -ga terminal-overrides ",*256col*:Tc"
set-option -ga terminal-overrides ",screen*:Tc"
set-option -ga terminal-overrides ",tmux*:Tc"

#set-option -g default-shell '/usr/local/bin/zsh'

#set-option -g default-command ''
# use reattach-to-user-namespace as the default command on OSX
#if-shell "test -f /usr/local/bin/reattach-to-user-namespace" 'set-option -g default-command "reattach-to-user-namespace -l bash"'

# rename windows
setw -g automatic-rename on

# window titles
set-option -g set-titles on
set-option -g set-titles-string '#W #(hostname --fqdn) (#{pane_pid})'

# vis-a-vis
#set-option -g visual-activity
#set-option -g destroy-unattached
#set-option -g detach-on-destroy

## bells and monitoring
#set-option -g visual-silence on
#set-option -g visual-bell off
##set-option -g bell-action any
# No bells at all
set-option -g bell-action none

# Start windows and panes at 1, not 0
set-option -g base-index 0
set-option -g pane-base-index 0

## If we want Vim to be told about focus: http://git.io/2UqSgQ
# Redraw bugs: https://github.com/neovim/neovim/issues/4884
set-option -g focus-events on

# amount of time for which status line messages and other indicators
# are displayed. time is in milliseconds.
set-option -g display-time 3000

# Shorten input delay (tmux normally adds a short delay on inputs)
#set-option -sg escape-time 0

# display visible indicator of each pane
bind 'W' display-panes

# reload this on 'r'
bind r source-file ~/.tmux.conf

## vim copying
#bind -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
##bind -t vi-copy PPage page-up
##bind -t vi-copy NPage page-down

##bind -t vi-copy v begin-selection
##bind -t vi-copy y copy-selection
##bind -t vi-copy Escape cancel
bind y run "tmux save-buffer - | pbcopy"

# copying and pasting
bind [ copy-mode
bind ] paste-buffer -s \015
#unbind [
#unbind ]

# choose buffer to paste interactively (default key was '=')
#bind p paste-buffer
#bind p choose-buffer

# Bring back clear screen under tmux prefix
#bind C-l send-keys 'C-l'

# last window
bind L last-window

# Sync keys pressed across panes
#bind e setw synchronize-panes on
#bind E setw synchronize-panes off

# fuzzy select pane
bind-key 0 run "tmux split-window -l 12 'zsh -ci ftpane'"

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n "C-\\" if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

unbind C-h
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

#bind -n C-Left if-shell "$is_vim" "send-keys C-h" "select-pane -L"
#bind -n C-Down if-shell "$is_vim" "send-keys C-j" "select-pane -D"
#bind -n C-Up if-shell "$is_vim" "send-keys C-k" "select-pane -U"
#bind -n C-Right if-shell "$is_vim" "send-keys C-l" "select-pane -R"

unbind -n C-Left
unbind -n C-Right
unbind -n C-Up
unbind -n C-Down

bind -n S-Left select-pane -L
bind -n S-Down select-pane -D
bind -n S-Up select-pane -U
bind -n S-Right select-pane -R

# Similar to 'C-w j' to navigate windows in Vim
unbind h
unbind j
unbind k
unbind l
unbind "\\"

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind "\\" select-pane -l

#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R
#bind "\\" select-pane -l

## Resize panes with arrows
#bind -n C-S-Left resize-pane -L 1
#bind -n C-S-Down resize-pane -D 1
#bind -n C-S-Up resize-pane -U 1
#bind -n C-S-Right resize-pane -R 1

# fix resizing (does not work with iterm integration)
is_iterm='test -n "${ITERM_SESSION_ID}"'
is_itermux='echo "${ITERM_PROFILE}" | grep -i tmux'
if-shell "$is_iterm" "setw -g aggressive-resize off" "setw -g aggressive-resize on"
#unbind C-h
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"

# vim resizes
bind - resize-pane -D 1
bind + resize-pane -U 1
bind < resize-pane -L 1
bind > resize-pane -R 1

# faster resizes
bind J resize-pane -D 5
bind K resize-pane -U 5
bind H resize-pane -L 5
bind L resize-pane -R 5

## swap panes
bind -r J swap-pane -D
bind -r K swap-pane -U

# resize panes like vim
bind -r < resize-pane -L 3
bind -r > resize-pane -R 3
bind -r + resize-pane -U 1
bind -r = resize-pane -D 1

## vim's definition of a horizontal/vertical split is reversed from tmux's
#bind s split-window -v
#bind v split-window -h

# vim style split + perserve pwd
bind s split-window -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'

# split or new window path perserve
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

#bind n new-window -c "#{pane_current_path}"
#bind i split-window -h -c "#{pane_current_path}"
#bind v split-window -c "#{pane_current_path}"

# list all paste buffers (default key is '#')
bind b list-buffers

# delete the most recently copied buffer of text (default key was '-')
bind x delete-buffer

# Clear scrollback history
bind C-k clear-history

# Screen-like key bindings

# new window
bind C-c new-window
bind c new-window

# quit
bind \ confirm-before kill-server

# displays
bind * list-clients



## List of plugins

# List of plugins
set-option -g @plugin 'tmux-plugins/tpm'

## regex search
set-option -g @plugin 'tmux-plugins/tmux-copycat'

# integration with system clipboard
set-option -g @plugin 'tmux-plugins/tmux-yank'

##set-option -g @plugin 'tmux-plugins/tmux-sensible'
#set-option -g @plugin 'tmux-plugins/tmux-logging'
#set-option -g @plugin 'tmux-plugins/tmux-pain-control'
set-option -g @plugin 'tmux-plugins/tmux-sidebar'

## quickly open highlighted url/path
set-option -g @plugin 'tmux-plugins/tmux-open'

## quickly open urls
set-option -g @plugin 'tmux-plugins/tmux-urlview'

set-option -g @plugin 'tmux-plugins/tmux-fpp'

## quickly open files/urls
#set-option -g @plugin 'akatrevorjay/tmux-fzf'

## Auto sessions
#set-option -g @plugin 'tmux-plugins/tmux-sessionist'
#set-option -g @plugin 'tmux-plugins/tmux-resurrect'
##set-option -g @plugin 'tmux-plugins/tmux-continuum'

## Restore last session automagically
##set-option -g @continuum-restore 'on'
#set-option -g @continuum-restore 'off'
#set-option -g @continuum-save-interval '1'

## Also save/restore neovim sessions
## for vim
#set-option -g @resurrect-strategy-vim 'session'
## for neovim
#set-option -g @resurrect-strategy-nvim 'session'

## Restore pane contents
#set-option -g @resurrect-capture-pane-contents 'on'

### Nice highlight when in cmd mode
#set-option -g @plugin 'tmux-plugins/tmux-prefix-highlight'
##set-option -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'
##set-option -g @prefix_highlight_fg 'white'
##set-option -g @prefix_highlight_bg 'blue'

## Status bar nicities
#set-option -g @plugin 'tmux-plugins/tmux-battery'
#set-option -g status-right 'Batt: #{battery_icon} #{battery_percentage} #{battery_remain} | %a %h-%d %H:%M '

#set-option -g @plugin 'tmux-plugins/tmux-cpu'
#set-option -g status-right "CPU: #{cpu_icon} #{cpu_percentage} | %a %h-%d %H:%M "

#set-option -g @plugin 'tmux-plugins/tmux-online-status'
#set-option -g status-right "Online: #{online_status} | %a %h-%d %H:%M "

#set-option -g status-right 'Online: #{online_status} | Batt: #{battery_icon} #{battery_percentage} #{battery_remain} | CPU: #{cpu_icon} #{cpu_percentage} | #{prefix_highlight} | %a %Y-%m-%d %H:%M'
#set-option -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

set-option -g @plugin 'thewtex/tmux-mem-cpu-load'
#set-option -g status-right "#[fg=green]#($TMUX_PLUGIN_MANAGER_PATH/tmux-mem-cpu-load/tmux-mem-cpu-load --colors --powerline-right --interval 2)#[default]"
set-option -g status-right "#[fg=green]#(tmux-mem-cpu-load --colors --powerline-right --interval 2)#[default]"

#set-option -g status-interval 2
##set-option -g status-right "#S #[fg=green,bg=black]#(tmux-mem-cpu-load --colors --interval 2 --mem-mode 2 --graph-lines 8)#[default]"
#set-option -g status-right "#S #[fg=green,bg=black]#(tmux-mem-cpu-load --colors --interval 2 --graph-lines 8)#[default]"
#set-option -g status-right-length 60

# Fix mouse wheel scrolling
set-option -g @plugin 'nhdaly/tmux-better-mouse-mode'
set-option -g @scroll-without-changing-pane "on"
#set-option -g @prevent-scroll-for-fullscreen-alternate-buffer "on"
set-option -g @scroll-in-moused-over-pane "on"

# One line is horrible.
set-option -g @scroll-speed-num-lines-per-scroll 10

#bind -t vi-copy WheelUpPane halfpage-up
#bind -t vi-copy WheelDownPane halfpage-down

if-shell "test -e ~/.tmux/local.conf" "source ~/.tmux/local.conf"

# Clone tpm if we don't have it already
if-shell "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

#  vim: set ts=4 sw=2 tw=120 et ft=tmux :
