#!/bin/zsh

umask 022

# if it's a dumb terminal, return.
if [[ ${TERM} == 'dumb' ]]; then
	return
fi
[[ $- =~ i ]] || return

if [[ -z $ZSH_CACHE_DIR ]]; then
	echo "- ZSH_CACHE_DIR is not set?" >&2
	return 1
elif [[ ! -e $ZSH_CACHE_DIR ]]; then
	echo "- Creating ZSH_CACHE_DIR=\"$ZSH_CACHE_DIR\"" >&2
	mkdir -pv $ZSH_CACHE_DIR
fi

##
## Vars
##

# enable all of the highlighters
typeset -Ua ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor root)

##
## Zplugins API
##

# list and queue
typeset -a ZPLUGINS=()
typeset -a ZPLUGINS_Q=()

function zplugins.init() {
	if ! (( ${+commands[antibody]} )) && (( ${+commands[go]} )); then
		echo "- Antibody not found in path. Attempting install.." >&2
		go install -u -x -v github.com/akatrevorjay/antibody
	fi

	if ! (( ${+commands[antibody]} )); then
		echo "- Could not find/install antibody. Cannot/will not continue. Deal with it." >&2
		return 1
	fi

	source <(command antibody init)
}

function zplugins.is-initialized() {
	(( ${+functions[antibody]} ))
}

# Queue loads until they are applied.
# We'll run them once we have the full list if necessary.
# Avoids races and dependency woes since now we can order accordingly.

function zplugins.q.add() {
	ZPLUGINS_Q+=(${(q)argv}$'\0')
}

function zplugins.q.dry-run() {
	command antibody bundle "${(0)ZPLUGINS_Q}"
}

function zplugins.q.apply() {
	zplugins.is-initialized || zplugins.init

	antibody bundle "${(0)ZPLUGINS_Q}"

	ZPLUGINS+=("${(@)ZPLUGINS_Q}")
	ZPLUGINS_Q=()
}

function zplugins.q.show() {
	command antibody bundle "${(0)ZPLUGINS}"
}

function zplugins.load() {
	zplugins.q.add "$@"

	! zplugins.is-initialized || zplugins.q.apply
}

function zplugins.load-all-in() {
	local p

	local paths=()
	for p in "$@"; do
		if [[ ${p:0:1} == / ]]; then
			paths+=($p(-/N))
		else
			paths+=(${^ZDOTDIRS}/$p(-/N))
		fi
	done

	local defer
	for p in ${^paths}/*(-/N); do
		defer=${${p:t}%%[^0-9]*}
		if [[ -n $defer ]]; then
			defer=$defer
		else
			defer=0
		fi

		# I have not patched antibody to support these as of yet.
		#zplugins.load $p --from local --defer $defer
		zplugins.load $p
	done
}

##
## Meat
##

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Secrets
source-with-force ${^ZDOTDIRS}/secrets(-.N)

# Collect plugin list
source-with-force ${^ZDOTDIRS}/zshplugins(-.N)

# Local
source-with-force $LOCAL_ZDOTDIR/zshrc

# Now we can apply them as necessary upon first call transparently.
# Avoids races and dependency woes since now we can order accordingly.
zplugins.q.apply

autoload -Uz fix-{f,}path-order
fix-path-order
fix-fpath-order

# Set up the prompt
autoload -Uz ztheme; ztheme

# This is annoying to have earlier.
#setopt warncreateglobal
