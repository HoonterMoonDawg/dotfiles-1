#!/bin/zsh

umask 022

# if it's a dumb terminal, return.
if [[ ${TERM} == 'dumb' ]]; then
    return
fi
[[ $- =~ i ]] || return

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Def
setopt extendedglob kshglob
setopt nullglob
setopt interactivecomments

# enable all of the highlighters
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor root line)

# secrets
source-with-force ~/.zsh/secrets

# Set up the prompt
autoload -Uz ztheme; ztheme

# zplug
: ${ZPLUG_HOME:=$XDG_CACHE_HOME/zplug}
: ${ZPLUG_CACHE_FILE:=$ZPLUG_HOME/.cache}
: ${ZPLUG_REPOS:=$ZPLUG_HOME/repos}
zstyle :zplug:tag depth 1

: ${ZPLUG_DIR:=$ZPLUG_REPOS/zplug/zplug}
: ${ZPLUG_REPO:=https://github.com/zplug/zplug.git}

ZPLUGINS_FILES=(${^ZDOTDIRS}/zshplugins(-.))

# Reset zplugs
typeset -a zplug_q=()
typeset -A zplugs=()

# Stub zplug that just queues the commands for later
function zplugins::zplug::stub() {
    set -- zplug "$@"
    zplug_q+=("${(q)@}" $'\0')
}

function zplug() {
    zplugins::zplug::stub "$@"
}

function zplugins::load-all-in() {
    local p

    local paths=()
    for p in "$@"; do
        if [[ ${p:0:1} == / ]]; then
            paths+=($p)
        else
            paths+=(${^ZDOTDIRS}/$p)
        fi
    done

    for p in ${^paths}/*(-/); do
        first_char=${${p:t}:0:1}
        if [[ $first_char = [0-9] ]]; then
            nice=$first_char
        else
            nice=5
        fi

        zplug "$p", from:local, nice:$nice
    done
}

# TODO check plugins difference on hook and auto-load
source-with-force $ZPLUGINS_FILES

# Install zplug if we don't have it.
if [[ ! -d $ZPLUG_DIR ]]; then
    echo "- No zplug found in ZPLUG_DIR=$ZPLUG_DIR" >&2

    echo "- Cloning zplug into ZPLUG_DIR=$ZPLUG_DIR" >&2
    if ! git clone $ZPLUG_REPO $ZPLUG_DIR; then
        echo "- Failed." >&2
        return 1
    fi
fi

function zplugins::zplug::apply {
    # Run through zplug_q
    local p
    for p in ${(0)zplug_q}; do
        p=(${(Z+Cn+)p})

        ZPLUG_LOADFILE=/dev/null "${(@)p}"
    done
}

function zplugins::zplug::lazy {
    unfunction zplug
    source $ZPLUG_DIR/init.zsh

    zplugins::zplug::apply

    zplug "$@"
}

function zplug() {
    zplugins::zplug::lazy "$@"
}

function zplugins::cache::is-clean() {
    if [ ! -f $ZPLUG_CACHE_FILE ]; then
        echo "- Cache file not found: $ZPLUG_CACHE_FILE" >&2
        return 1
    fi

    local plugins_file
    for plugins_file in ${(@)ZPLUGINS_FILES}; do
        if [ $plugins_file -nt $ZPLUG_CACHE_FILE -o $plugins_file -nt $plugins_file:h ]; then
            echo "- Detected change in $plugins_file" >&2
            return 100
        fi
    done
}

if zplugins::cache::is-clean; then
    echo "- Loading cache"
    source $ZPLUG_CACHE_FILE
else
    rm -f $ZPLUG_CACHE_FILE
    echo "- Creating cache (may take a second)"

    if ! zplug check --verbose; then
	    printf -- "-- Found changes in zshplugins. Install them? [y/N]: "
        if read -q; then
            echo; zplug install
        fi
    fi

    zplug load --verbose
fi

# local
source-with-force $LOCAL_ZDOTDIR/zshrc

# This is annoying to have earlier.
#setopt warncreateglobal

autoload -Uz fix-{f,}path-order
fix-path-order
fix-fpath-order

